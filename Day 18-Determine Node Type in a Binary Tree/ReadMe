===>Problem Statement
You are given a table, BST, with two columns:

N: Represents the value of a node in a binary tree.
P: Represents the parent of the node N.
Write a query to identify the type of each node in the binary tree.
The node type can be one of the following:

Root: If the node does not have a parent (P IS NULL).
Leaf: If the node does not have any children (N NOT IN P).
Inner: If the node is neither a root nor a leaf.
The output should contain the node value (N) and its type (Root, Leaf, or Inner), ordered by the value of the node (N).

===>Query

SELECT 
    N,
    CASE
        WHEN P IS NULL THEN 'Root'
        WHEN N NOT IN (SELECT DISTINCT P FROM BST WHERE P IS NOT NULL) THEN 'Leaf'
        ELSE 'Inner'
    END AS NodeType
FROM BST
ORDER BY N;

===>Explanation
Root Node:

A root node is identified as having no parent (P IS NULL).
Leaf Node:

A leaf node is a node that does not appear as a parent to any other node in the tree.
This is determined by checking if N is not in the list of all parent values (SELECT DISTINCT P FROM BST).
Inner Node:

If the node has a parent (P IS NOT NULL) and appears as a parent for at least one other node, it is classified as an inner node.
Ordering:

The output is sorted by the value of the node (N).

===>Sample Input
N	P
1	2
2	5
3	2
5	NULL
6	8
8	5
9	8

===>Sample Output

1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf

===>Explanation
Given the input table, the binary tree structure is as follows:


        5
       / \
      2   8
     / \    \
    1   3    9
              \
               6
Root: Node 5 (has no parent).
Leaf: Nodes 1, 3, 6, and 9 (have no children).
Inner: Nodes 2 and 8 (have both parent and children).

===>Test Cases
Test Case 1: Simple Binary Tree
Input:

N	P
1	2
2	3
3	NULL
Output:

1 Leaf
2 Inner
3 Root

===>Test Case 2: Single Node Tree
Input:

N	P
1	NULL

===>Output:

1 Root
